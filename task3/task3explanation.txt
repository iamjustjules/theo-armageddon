Task 3

You must complete the following scenerio.

A European gaming company is moving to GCP.  It has the following requirements in it's first stage migration to the Cloud:

A) You must choose a region in Europe to host it's prototype gaming information.  This page must only be on a RFC 1918 Private 10 net and can't be accessible from the Internet.
B) The Americas must have 2 regions and both must be RFC 1918 172.16 based subnets.  They can peer with HQ in order to view the homepage however, they can only view the page on port 80.
C) Asia Pacific region must be choosen and it must be a RFC 1918 192.168 based subnet.  This subnet can only VPN into HQ.  Additionally, only port 3389 is open to Asia. No 80, no 22.

Deliverables.
1) Complete Terraform for the entire solution.
2) Git Push of the solution to your GitHub.
3) Screenshots showing how the HQ homepage was accessed from both the Americas and Asia Pacific. 


“00-provider.tf”
- Provider Configuration: Specifies that Google Cloud is the provider for the infrastructure resources. The “credentials” field refers to the JSON key file that contains your service account key, which Terraform will use to authenticate with Google Cloud.
- Project and Region: Sets default values for the project and region, which apply to all resources unless explicitly overridden. This simplifies resource definitions by not needing to specify these values repeatedly.
- Required Providers: This block specifies the version constraints for the Google Cloud provider, ensuring that Terraform uses an appropriate version of the provider that's compatible with your code.

“01-main.tf”
- Virtual Private Cloud (VPC) and Subnets:
- European VPC: Defines a VPC in Europe without auto-created subnets, allowing for manual subnet management.
- European Subnet: Specifies a subnet within the European VPC with a specific CIDR block and enables private Google access, which allows resources in the subnet to communicate with Google services without public IP addresses.
- American VPCs: Similar to the European setup, two VPCs are defined for America, again without auto-created subnets.
- American Subnets: Each American VPC has a dedicated subnet, defined with specific CIDR blocks.
- Asia Pacific VPC and Subnet: Follows the same pattern as other regions, with a VPC and a specific subnet for the Asia Pacific region.

“02-variables.tf”
- Variables: Defines variables “project_id”, “european_region”, “american_region1”, “american_region2”, and “asia_pacific_region”. These allow for dynamic input, which are used across the configuration to specify the deployment settings like region-specific resources.

“03-outputs.tf”
- Outputs: Outputs are used to easily access important information about the resources once Terraform applies the configurations. For instance:
- “european_vpc_id” and similar outputs for other regions provide the ID of the created VPCs, which can be useful for debugging, cross-referencing, or as inputs to other tools or scripts.
- Subnet ranges like “european_subnet_range” provide CIDR blocks of each created subnet, useful for network planning and management.

Interaction Among Blocks
- Resource Definitions and Variable Usage: Each resource block in “01-main.tf” uses variables from “02-variables.tf” to specify configurations like region, which makes the code reusable and adaptable to different environments without changing the core logic.
- Provider and Resource Dependency: The provider configuration in “00-provider.tf” must successfully authenticate and be configured correctly for the resources in “01-main.tf” to be provisioned in GCP.
- Outputs and Resource Attributes: The outputs in “03-outputs.tf” extract attributes from the resources defined in “01-main.tf”, such as VPC and subnet IDs or CIDR ranges. These outputs can be critical for further automation or integration with other systems.
This setup ensures a modular, understandable, and maintainable infrastructure-as-code environment where changes to the infrastructure can be managed with minimal adjustments to the code, primarily through the variables file or by updating resource definitions in “01-main.tf”. Each component plays a specific role and interacts with others through the use of shared variables and attributes, reflecting a well-structured Terraform project.
