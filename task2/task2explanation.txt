Task 2

- Create a publicly accessible web page with Terraform.  You must complete the following
    - Terraform Script with a VPC
    - Terraform script must have a VM within your VPC.
    - The VM must have the homepage on it.
    - The VM must have an publicly accessible link to it.
    - You must Git Push your script to your Github.
    - Output file must show 1) Public IP, 2) VPC, 3) Subnet of the VM, 4) Internal IP of the VM.


Here's how each block works:
 
00-providers.tf
This file configures the providers:
- “google”: Used for most of the GCP resources.
- “google-beta”: Used for accessing beta features or resources that are only available in the beta provider.  
Both are configured with credentials, project ID, and region, so terraform can authenticate and interact with the project.

01-main.tf
This is where resources are created:
- Google Storage Bucket: Configured for hosting static content (HTML and images) with a specific CORS setting to allow web access and uniform bucket-level access for consistent permissions management.
- IAM Binding: Ensures the bucket’s contents are publicly accessible by binding the “storage.objectViewer” role to all users.
- Content Objects: HTML and image files are uploaded to the bucket. These objects are accessible via the bucket to serve as a static website.
- VPC and Subnetwork: Defines a VPC and a subnetwork for deploying a virtual machine, used for backend services and tasks.
- Virtual Machine: Configures a VM in the VPC/subnet to install and run a web server for a deployment.
- Secrets Manager Data Source: Pulls data from GCP Secrets Manager integrating secrets for secure access.

02-variables.tf
Defines all the variables used.

03-outputs.tf
Specifies output variables requested. The fetched secret is crucial for security.

secrets.js
This is a Node.js script, not directly part of Terraform but related to managing secrets.
-Purpose: Demonstrates how to programmatically access secrets from Google Cloud Secrets Manager using the Google Cloud Node.js client library.
-Functionality: Connects to Secrets Manager, retrieves a secret, and logs its value. It’s an example of how application code might interact with secrets, separate from Terraform.

How They Work Together
- The configuration sets up the infrastructure with the static website and network components. It integrates Secrets Manager to securely fetch and use the secret in the infrastructure.
- Node.js Script: Represents a separate application layer or operational script used for secret management or dynamic configuration during runtime.
- Outputs from Terraform provide crucial URLs and IP addresses that might be used by other systems or reported back to end users for direct access.

Features
- Security: The Terraform setup ensures that the bucket contents are publicly readable, suitable for a static website. It also uses Google Cloud Secrets Manager for sensitive data.
- Modularity: The use of variables and outputs makes the configuration modular and reusable, allowing parameters to be changed easily without altering the main configuration.
- Separation: This manages infrastructure, while the Node.js script manages runtime secret fetching for a separation between infrastructure provisioning and application runtime management.