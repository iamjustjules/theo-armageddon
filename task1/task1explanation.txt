Task 1

- Create a publicly accessible bucket in GCP with Terraform.  You must complete the following tasks.
    - Terraform script
    - Git Push the script to your Github
    - Output file must show the public link
    - Must have an index.html file within

These files work together individually and together:

00-providers.tf
This configures the providers needed. It specifies both the standard “google” provider and the “google-beta” provider, needed for accessing beta features.
-Provider Setup: Includes credentials, project ID, and region.
-”required_providers” Block: Ensures that the correct provider versions are used.
-Purpose: Sets up the environment for Terraform to interact with Google Cloud resources.

01-main.tf
This is where the resources are defined.
-Google Storage Bucket: Configures a Google Cloud Storage (GCS) bucket to host a static website (“index.html” and images). It sets up website configuration, CORS settings, and enables uniform bucket-level access for better security.
-IAM Binding: Grants public read access to the objects in the bucket, making the website publicly accessible.
-Storage Bucket Objects: Defines objects like “index.html”, “Jandk.png”, and “JandN.jpg” to be uploaded to the GCS bucket.
-Secret Manager Data Source: Fetches a secret from Google Cloud Secrets Manager, showing how to integrate secret management within Terraform.

02-variables.tf
Defines variables used.
-Variables: Include “project_id”, “region”, “credentials”, and “bucket_name”. These are placeholders that are replaced with actual values during runtime, providing flexibility and reusability of the Terraform templates.

03-outputs.tf
Defines output variables.
-Website URL: Outputs the URL where the static website is hosted.
-Secret Value: Outputs the value of the secret fetched from Google Cloud Secrets Manager, marked as sensitive to prevent it from being displayed in logs or console output.

secrets.js
This is a Node.js script, not directly part of Terraform but related to managing secrets.
-Purpose: Demonstrates how to programmatically access secrets from Google Cloud Secrets Manager using the Google Cloud Node.js client library.
-Functionality: Connects to Secrets Manager, retrieves a secret, and logs its value. It’s an example of how application code might interact with secrets, separate from Terraform.

How They Work Together
-Terraform Files: Set up infrastructure (GCS bucket, objects, IAM policies) and securely fetch secrets as part of the infrastructure setup.
-Node.js Script: Represents a separate application layer or operational script used for secret management or dynamic configuration during runtime.

Features
-Security: The Terraform setup ensures that the bucket contents are publicly readable, suitable for a static website. It also uses Google Cloud Secrets Manager for sensitive data.
-Modularity: The use of variables and outputs makes the configuration modular and reusable, allowing parameters to be changed easily without altering the main configuration.
-Separation: This manages infrastructure, while the Node.js script manages runtime secret fetching for a separation between infrastructure provisioning and application runtime management.
